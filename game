#Exercise 1 

crra = function(c,theta){
  if (theta!=1){
    u = c^(1-theta)/(1-theta)
  }else{
    u = log(c)
  }
  return(u)
}
c = 50
thetas = seq(-0.5,1.5,0.01)
utilities = c()
for (t in thetas) {
  utilities = c(utilities,crra(c,t))
}
plot(thetas,utilities,type = "l")

# Exercise 2

l1_p1 = c(48,40,32,24,16,48,42,36,30,24,48,38,28,18,8,42,36,30,24,18,54,44,34,24,14)
l1_p2 = c(48,64,80,96,112,48,66,84,102,120,48,62,76,90,104,42,60,78,96,114,54,68,82,96,110)
l2_p1 <- c(40, 32, 24, 16, 8, 42, 36, 30, 24, 16, 38, 28, 18, 8, 0, 36, 30, 24, 18, 10, 44, 34, 24, 14, 6)
l2_p2 <- c(64,80,96,112,120,66,84,102,120,128,62,76,90,104,112,60,78,96,114,122,68,82,96,110,118)
dat_ex2 = data.frame(t(rbind(l1_p1, l1_p2, l2_p1, l2_p2)))

gap = function(l1_p1,l1_p2,l2_p1,l2_p2,theta){
  0.5*(function1(l1_p1, theta) + function1(l1_p2, theta) - function1(l2_p1,theta) -function1(l2_p2, theta))
}

install.packages("NLRoot")
library(NLRoot)

bisection <- function(f, l1_p1, l1_p2, l2_p1, l2_p2,a, b, n = 1000, tol = 1e-7) {
  # If the signs of the function at the evaluated points, a and b, stop the function and return message.
  if (!(f(l1_p1, l1_p2, l2_p1, l2_p2,a) < 0) && (f(l1_p1, l1_p2, l2_p1, l2_p2,b) > 0)) {
    stop('signs of f(a) and f(b) differ')
  } else if ((f(l1_p1, l1_p2, l2_p1, l2_p2,a) > 0) && (f(l1_p1, l1_p2, l2_p1, l2_p2,b) < 0)) {
    stop('signs of f(a) and f(b) differ')
  }
  
  for (i in 1:n) {
    c <- (a + b) / 2 # Calculate midpoint
    
    # If the function equals 0 at the midpoint or the midpoint is below the desired tolerance, stop the 
    # function and return the root.
    if ((f(l1_p1, l1_p2, l2_p1, l2_p2,c) == 0) || ((b - a) / 2) < tol) {
      return(c)
    }
    
    # If another iteration is required, 
    # check the signs of the function at the points c and a and reassign
    # a or b accordingly as the midpoint to be used in the next iteration.
    ifelse(sign(f(l1_p1, l1_p2, l2_p1, l2_p2,c)) == sign(f(l1_p1, l1_p2, l2_p1, l2_p2,a)), 
           a <- c,
           b <- c)
  }
  # If the max number of iterations is reached and no root has been found, 
  # return message and end function.
  print('Too many iterations')
}

func <- function(l1_p1, l1_p2, l2_p1, l2_p2, x){function1(l1_p1, x) + function1(l1_p2, x) -function1(l2_p1, x) -function1(l2_p2, x)}

ra_list = c()
for(index in 1:nrow(dat_ex2)){
  l1_p1 = dat_ex2[index,1]
  l1_p2 = dat_ex2[index,2]
  l2_p1 = dat_ex2[index,3]
  l2_p2 = dat_ex2[index,4]
  temp = bisection(func,l1_p1, l1_p2, l2_p1, l2_p2,-100,100)
  ra_list = c(ra_list,temp)
}
ra_list

# 4.1 

griddf = expand.grid(latcoords = seq(-5,5,0.01),lngcoords = seq(-5,5,0.01))
fun4 = function(x,y){
  v = (1.5-x+x*y)^2 + (2.25-x+x*y^2)^2 + (2.625-x+x*y^3)^2
  return(v)
}
vs = fun4(griddf$latcoords,griddf$lngcoords)
griddf[which(vs==min(vs)),] # x=3,y=0.5,min_value=0
